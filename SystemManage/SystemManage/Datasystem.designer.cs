#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SystemManage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SystemManage")]
	public partial class DatasystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertManage(Manage instance);
    partial void UpdateManage(Manage instance);
    partial void DeleteManage(Manage instance);
    partial void InsertProcess(Process instance);
    partial void UpdateProcess(Process instance);
    partial void DeleteProcess(Process instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertUser_name(User_name instance);
    partial void UpdateUser_name(User_name instance);
    partial void DeleteUser_name(User_name instance);
    #endregion
		
		public DatasystemDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SystemManageConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatasystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatasystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatasystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatasystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Manage> Manages
		{
			get
			{
				return this.GetTable<Manage>();
			}
		}
		
		public System.Data.Linq.Table<Process> Processes
		{
			get
			{
				return this.GetTable<Process>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<User_name> User_names
		{
			get
			{
				return this.GetTable<User_name>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manage")]
	public partial class Manage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_Mange;
		
		private string _ID_Project;
		
		private string _Subrasks_Project;
		
		private string _ID_User;
		
		private string _Status;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User_name> _User_name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MangeChanging(string value);
    partial void OnID_MangeChanged();
    partial void OnID_ProjectChanging(string value);
    partial void OnID_ProjectChanged();
    partial void OnSubrasks_ProjectChanging(string value);
    partial void OnSubrasks_ProjectChanged();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Manage()
		{
			this._Project = default(EntityRef<Project>);
			this._User_name = default(EntityRef<User_name>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Mange", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_Mange
		{
			get
			{
				return this._ID_Mange;
			}
			set
			{
				if ((this._ID_Mange != value))
				{
					this.OnID_MangeChanging(value);
					this.SendPropertyChanging();
					this._ID_Mange = value;
					this.SendPropertyChanged("ID_Mange");
					this.OnID_MangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Project", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ID_Project
		{
			get
			{
				return this._ID_Project;
			}
			set
			{
				if ((this._ID_Project != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ProjectChanging(value);
					this.SendPropertyChanging();
					this._ID_Project = value;
					this.SendPropertyChanged("ID_Project");
					this.OnID_ProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subrasks_Project", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Subrasks_Project
		{
			get
			{
				return this._Subrasks_Project;
			}
			set
			{
				if ((this._Subrasks_Project != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubrasks_ProjectChanging(value);
					this.SendPropertyChanging();
					this._Subrasks_Project = value;
					this.SendPropertyChanged("Subrasks_Project");
					this.OnSubrasks_ProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					if (this._User_name.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Manage", Storage="_Project", ThisKey="ID_Project,Subrasks_Project", OtherKey="ID_Project,Subrasks_Project", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Manages.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Manages.Add(this);
						this._ID_Project = value.ID_Project;
						this._Subrasks_Project = value.Subrasks_Project;
					}
					else
					{
						this._ID_Project = default(string);
						this._Subrasks_Project = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_name_Manage", Storage="_User_name", ThisKey="ID_User", OtherKey="ID_User", IsForeignKey=true)]
		public User_name User_name
		{
			get
			{
				return this._User_name.Entity;
			}
			set
			{
				User_name previousValue = this._User_name.Entity;
				if (((previousValue != value) 
							|| (this._User_name.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_name.Entity = null;
						previousValue.Manages.Remove(this);
					}
					this._User_name.Entity = value;
					if ((value != null))
					{
						value.Manages.Add(this);
						this._ID_User = value.ID_User;
					}
					else
					{
						this._ID_User = default(string);
					}
					this.SendPropertyChanged("User_name");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Processes")]
	public partial class Process : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name_Processes;
		
		private System.DateTime _Dead_Line;
		
		private int _Progress;
		
		private System.DateTime _Last_Edit;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnName_ProcessesChanging(string value);
    partial void OnName_ProcessesChanged();
    partial void OnDead_LineChanging(System.DateTime value);
    partial void OnDead_LineChanged();
    partial void OnProgressChanging(int value);
    partial void OnProgressChanged();
    partial void OnLast_EditChanging(System.DateTime value);
    partial void OnLast_EditChanged();
    #endregion
		
		public Process()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Processes", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name_Processes
		{
			get
			{
				return this._Name_Processes;
			}
			set
			{
				if ((this._Name_Processes != value))
				{
					this.OnName_ProcessesChanging(value);
					this.SendPropertyChanging();
					this._Name_Processes = value;
					this.SendPropertyChanged("Name_Processes");
					this.OnName_ProcessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dead_Line", DbType="Date NOT NULL")]
		public System.DateTime Dead_Line
		{
			get
			{
				return this._Dead_Line;
			}
			set
			{
				if ((this._Dead_Line != value))
				{
					this.OnDead_LineChanging(value);
					this.SendPropertyChanging();
					this._Dead_Line = value;
					this.SendPropertyChanged("Dead_Line");
					this.OnDead_LineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Int NOT NULL")]
		public int Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Edit", DbType="Date NOT NULL")]
		public System.DateTime Last_Edit
		{
			get
			{
				return this._Last_Edit;
			}
			set
			{
				if ((this._Last_Edit != value))
				{
					this.OnLast_EditChanging(value);
					this.SendPropertyChanging();
					this._Last_Edit = value;
					this.SendPropertyChanged("Last_Edit");
					this.OnLast_EditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Project", Storage="_Projects", ThisKey="Name_Processes", OtherKey="Name_Processes")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_Project;
		
		private string _Name_Project;
		
		private string _Subrasks_Project;
		
		private System.Nullable<System.DateTime> _Dead_Line;
		
		private string _Comment;
		
		private string _Comment_Bymanager;
		
		private string _Issue;
		
		private string _Name_Processes;
		
		private EntitySet<Manage> _Manages;
		
		private EntityRef<Process> _Process;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ProjectChanging(string value);
    partial void OnID_ProjectChanged();
    partial void OnName_ProjectChanging(string value);
    partial void OnName_ProjectChanged();
    partial void OnSubrasks_ProjectChanging(string value);
    partial void OnSubrasks_ProjectChanged();
    partial void OnDead_LineChanging(System.Nullable<System.DateTime> value);
    partial void OnDead_LineChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnComment_BymanagerChanging(string value);
    partial void OnComment_BymanagerChanged();
    partial void OnIssueChanging(string value);
    partial void OnIssueChanged();
    partial void OnName_ProcessesChanging(string value);
    partial void OnName_ProcessesChanged();
    #endregion
		
		public Project()
		{
			this._Manages = new EntitySet<Manage>(new Action<Manage>(this.attach_Manages), new Action<Manage>(this.detach_Manages));
			this._Process = default(EntityRef<Process>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Project", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_Project
		{
			get
			{
				return this._ID_Project;
			}
			set
			{
				if ((this._ID_Project != value))
				{
					this.OnID_ProjectChanging(value);
					this.SendPropertyChanging();
					this._ID_Project = value;
					this.SendPropertyChanged("ID_Project");
					this.OnID_ProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Project", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name_Project
		{
			get
			{
				return this._Name_Project;
			}
			set
			{
				if ((this._Name_Project != value))
				{
					this.OnName_ProjectChanging(value);
					this.SendPropertyChanging();
					this._Name_Project = value;
					this.SendPropertyChanged("Name_Project");
					this.OnName_ProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subrasks_Project", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Subrasks_Project
		{
			get
			{
				return this._Subrasks_Project;
			}
			set
			{
				if ((this._Subrasks_Project != value))
				{
					this.OnSubrasks_ProjectChanging(value);
					this.SendPropertyChanging();
					this._Subrasks_Project = value;
					this.SendPropertyChanged("Subrasks_Project");
					this.OnSubrasks_ProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dead_Line", DbType="Date")]
		public System.Nullable<System.DateTime> Dead_Line
		{
			get
			{
				return this._Dead_Line;
			}
			set
			{
				if ((this._Dead_Line != value))
				{
					this.OnDead_LineChanging(value);
					this.SendPropertyChanging();
					this._Dead_Line = value;
					this.SendPropertyChanged("Dead_Line");
					this.OnDead_LineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment_Bymanager", DbType="VarChar(MAX)")]
		public string Comment_Bymanager
		{
			get
			{
				return this._Comment_Bymanager;
			}
			set
			{
				if ((this._Comment_Bymanager != value))
				{
					this.OnComment_BymanagerChanging(value);
					this.SendPropertyChanging();
					this._Comment_Bymanager = value;
					this.SendPropertyChanged("Comment_Bymanager");
					this.OnComment_BymanagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="VarChar(MAX)")]
		public string Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Processes", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name_Processes
		{
			get
			{
				return this._Name_Processes;
			}
			set
			{
				if ((this._Name_Processes != value))
				{
					if (this._Process.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnName_ProcessesChanging(value);
					this.SendPropertyChanging();
					this._Name_Processes = value;
					this.SendPropertyChanged("Name_Processes");
					this.OnName_ProcessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Manage", Storage="_Manages", ThisKey="ID_Project,Subrasks_Project", OtherKey="ID_Project,Subrasks_Project")]
		public EntitySet<Manage> Manages
		{
			get
			{
				return this._Manages;
			}
			set
			{
				this._Manages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Project", Storage="_Process", ThisKey="Name_Processes", OtherKey="Name_Processes", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Process.Entity;
			}
			set
			{
				Process previousValue = this._Process.Entity;
				if (((previousValue != value) 
							|| (this._Process.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Process.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Process.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Name_Processes = value.Name_Processes;
					}
					else
					{
						this._Name_Processes = default(string);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Manages(Manage entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Manages(Manage entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skills")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_User;
		
		private string _Name_Skills;
		
		private int _Experience;
		
		private EntityRef<User_name> _User_name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnName_SkillsChanging(string value);
    partial void OnName_SkillsChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    #endregion
		
		public Skill()
		{
			this._User_name = default(EntityRef<User_name>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					if (this._User_name.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Skills", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name_Skills
		{
			get
			{
				return this._Name_Skills;
			}
			set
			{
				if ((this._Name_Skills != value))
				{
					this.OnName_SkillsChanging(value);
					this.SendPropertyChanging();
					this._Name_Skills = value;
					this.SendPropertyChanged("Name_Skills");
					this.OnName_SkillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="Int NOT NULL")]
		public int Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_name_Skill", Storage="_User_name", ThisKey="ID_User", OtherKey="ID_User", IsForeignKey=true)]
		public User_name User_name
		{
			get
			{
				return this._User_name.Entity;
			}
			set
			{
				User_name previousValue = this._User_name.Entity;
				if (((previousValue != value) 
							|| (this._User_name.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_name.Entity = null;
						previousValue.Skill = null;
					}
					this._User_name.Entity = value;
					if ((value != null))
					{
						value.Skill = this;
						this._ID_User = value.ID_User;
					}
					else
					{
						this._ID_User = default(string);
					}
					this.SendPropertyChanged("User_name");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_name")]
	public partial class User_name : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_User;
		
		private string _Pass;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Position;
		
		private string _Sex;
		
		private System.Nullable<System.DateTime> _birthday;
		
		private string _Address;
		
		private string _email;
		
		private EntitySet<Manage> _Manages;
		
		private EntityRef<Skill> _Skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public User_name()
		{
			this._Manages = new EntitySet<Manage>(new Action<Manage>(this.attach_Manages), new Action<Manage>(this.detach_Manages));
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_name_Manage", Storage="_Manages", ThisKey="ID_User", OtherKey="ID_User")]
		public EntitySet<Manage> Manages
		{
			get
			{
				return this._Manages;
			}
			set
			{
				this._Manages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_name_Skill", Storage="_Skill", ThisKey="ID_User", OtherKey="ID_User", IsUnique=true, IsForeignKey=false)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.User_name = null;
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.User_name = this;
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Manages(Manage entity)
		{
			this.SendPropertyChanging();
			entity.User_name = this;
		}
		
		private void detach_Manages(Manage entity)
		{
			this.SendPropertyChanging();
			entity.User_name = null;
		}
	}
}
#pragma warning restore 1591
